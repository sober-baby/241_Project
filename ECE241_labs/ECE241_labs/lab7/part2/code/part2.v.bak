
// Part 2 skeleton

module fill
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
		KEY,
		SW,
		// On Board Keys
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	input	[3:0]	KEY;	


	input[9:0] SW;
	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[7:0]	VGA_R;   				//	VGA Red[7:0] Changed from 10 to 8-bit DAC
	output	[7:0]	VGA_G;	 				//	VGA Green[7:0]
	output	[7:0]	VGA_B;   				//	VGA Blue[7:0]
	
	wire resetn;
	assign resetn = KEY[0];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
	
	
	wire oDone;	
	
	  part2 p(.iResetn(KEY[0]), .iPlotBox(KEY[1]), .iBlack(KEY[2]), .iColour(SW[9:7]), .iLoadX(KEY[3]), .iXY_Coord(SW[6:0]),
				.iClock(CLOCK_50), .oX(x), .oY(y), .oPlot(writeEn), .oDone(oDone));				
	
endmodule

//
// This is the template for Part 2 of Lab 7.
//
// Paul Chow
// November 2021
//

module part2(iResetn,iPlotBox,iBlack,iColour,iLoadX,iXY_Coord,iClock,oX,oY,oColour,oPlot,oDone);
   parameter X_SCREEN_PIXELS = 8'd160;
   parameter Y_SCREEN_PIXELS = 7'd120;

   input wire iResetn, iPlotBox, iBlack, iLoadX;
   input wire [2:0] iColour;
   input wire [6:0] iXY_Coord;
   input wire 	    iClock;
   output wire [7:0] oX;         // VGA pixel coordinates
   output wire [6:0] oY;

   output wire [2:0] oColour;     // VGA pixel colour (0-7)
   output wire 	     oPlot;       // Pixel draw enable
   output wire       oDone;       // goes high when finished drawing frame

   //
   // Your code goes here
   //

	
	wire ld_x, ld_y_c, ld_black, Plot;
	wire[7:0]blackX;
	wire[6:0]blackY;
	wire[4:0]area;
	
	
	
	control aa(iClock, iResetn, iPlotBox, iBlack, iLoadX, blackX, blackY, area,
	ld_x, ld_y_c, ld_black, Plot, oDone, oPlot);
	

	
	datapath bb(iClock, iResetn, ld_x, ld_y_c, ld_black, oPlot, iColour, iXY_Coord, 
	oX, blackX, oY, blackY, oColour, area);
	
endmodule 


///Control Module

module control(
	//input X_SCREEN_PIXELS,
	//input Y_SCREEN_PIXELS, 
	input iClock,
	input iResetn,
   input iPlotBox,
   input iBlack,
	input iLoadX,
	input [7:0] blackX,
	input [6:0] blackY,
	input [4:0] area,
	 
   output reg ld_x, ld_y_c, ld_black,
   output reg plot, done, oPlot
   );
	
	parameter X_SCREEN_PIXELS = 8'd160;
   parameter Y_SCREEN_PIXELS = 7'd120;
	 
	reg [2:0] current_state, next_state;
	 
	localparam  S_LOAD_X        = 3'd0,
               S_LOAD_X_WAIT   = 3'd1,
               S_LOAD_Y_C        = 3'd2,
               S_LOAD_Y_C_WAIT   = 3'd3,
					S_DRAW				 = 3'd4,
				   S_BLACK				 = 3'd5,
					S_DONE				 = 3'd6;
					
	always@(posedge iClock)
		begin: state_table
			case (current_state)
				S_LOAD_X: next_state = iLoadX ? S_LOAD_X_WAIT : S_LOAD_X; 
				S_LOAD_X_WAIT: next_state = iLoadX ? S_LOAD_X_WAIT : S_LOAD_Y_C;
				S_LOAD_Y_C: next_state = iPlotBox ? S_LOAD_Y_C_WAIT : S_LOAD_Y_C; 
				S_LOAD_Y_C_WAIT: next_state = iPlotBox ?  S_LOAD_Y_C_WAIT : S_DRAW;
				
				S_DRAW:
					begin
						if (area == 5'd15)
							next_state = S_DONE;
						else 
							next_state = S_DRAW;
					end
					
				S_BLACK: 
					begin
						if (blackX == X_SCREEN_PIXELS-1 && blackY == Y_SCREEN_PIXELS-1)
							next_state = S_DONE;
						else
							next_state = S_BLACK;
					end
				S_DONE: next_state = S_LOAD_X;
				
            default: next_state = S_LOAD_X;
         endcase
		end // state_table
	 
	 
	always@(posedge iClock)
		begin: Loads
			ld_x <= 1'b0;
			ld_y_c <= 1'b0;
			ld_black <= 1'b0;
			
			if ( iBlack == 1 || iLoadX == 1)
				plot <= 1'b0;
				done <= 1'b0;
				oPlot <= 0;
			
			case (current_state)
			
				S_LOAD_X:
				begin
					ld_x <= 1'b1;
					oPlot <= 1'b0;
					plot <= 1'b0;
					
				end
				
				S_LOAD_Y_C:
				begin
					ld_y_c <= 1'b1;
					plot <= 1'b0;
				end
				
				S_DRAW:
				begin
					plot <= 1'b1;
					oPlot <= 1'b1;
				end
				
				S_BLACK:
				begin
					ld_black <= 1'b1;
					oPlot <= 1'b1;
				end
				
				S_DONE:
				begin
					done <= 1'b1;
				end
		
			endcase
		end ///Loads
		

	always@(posedge iClock)
		begin: FinateStateMachine
			if(!iResetn)
				current_state <= S_LOAD_X;
				
			if (iBlack == 1)
				current_state <= S_BLACK;
	
			else 
				current_state <= next_state;
				
		end /// FinateStateMachine
		
endmodule


///Data Path Module

module datapath(
	//input X_SCREEN_PIXELS,
	//input Y_SCREEN_PIXELS,
	input iClock,
	input iResetn,
	input ld_x, ld_y_c, ld_black, oPlot,
	input [2:0] iColor,
	input [6:0] iXY_Coord,
	 
	output reg [7:0] oX, blackX,
	output reg [6:0] oY, blackY,
	output reg [2:0] oColor,
	output reg [4:0] area
	);
	
	parameter X_SCREEN_PIXELS = 8'd160;
   parameter Y_SCREEN_PIXELS = 7'd120;
	
	/// input values
	
	reg [7:0] x;
	reg [6:0] y;
	reg [2:0] Color;
	
	always@(posedge iClock)
		begin
			if (!iResetn) 
				begin
					x <= 8'b0;
					y <= 7'b0;
					Color <= 3'b0;
					area <= 5'b0;
				end
				
			else
				begin
					if (ld_x == 1)
						begin
							x[7] <= 1'b0;
							x[6:0] <= iXY_Coord;
						end
					
					if (ld_y_c == 1)
						begin
							y <= iXY_Coord;
							Color <= iColor;
						end
					
					if (oPlot == 1 )
						begin
							if (area == 5'd16)
								begin
									area <= 5'd0;
								end
								
							else 
								begin
									area <= area + 1;
								end 
								
							oX <= x + area[1:0];
							oY <= y + area[3:2];
							oColor <= Color;
							
						end
					if (ld_black)
						begin
							oX <= blackX;
							oY <= blackY;
							oColor <= 3'b000;
						end
				end
					
		end
		
	always@(posedge iClock)
		begin
			if (!iResetn) 
				begin
					blackX <= 8'b0;
					blackY <= 7'b0;
				end
				
			if ( blackX == X_SCREEN_PIXELS - 1 && blackY == Y_SCREEN_PIXELS - 1 )
				begin
					blackX <= 8'b0;
					blackY <= 7'b0;
				end
			
			else if ( blackX == X_SCREEN_PIXELS - 1)
				begin
					blackX <= 8'b0;
					blackY <= blackY + 1;
				end
				
			if (ld_black)
				begin
					blackX <= blackX + 1;
					
				end
		end



endmodule































